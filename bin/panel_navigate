#!/usr/bin/env python3

# Adapted from script by Jacob Vlijm
#     https://askubuntu.com/a/560158
# License: CC BY-SA 3.0
#     https://creativecommons.org/licenses/by-sa/3.0/

# To use:
# 1. Xfce Menu > Settings > Panel
#        a. Go to the Items tab
#        b. Select Window Buttons and click Edit
#        c. Set Sorting order to Group title and timestamp
#        d. Set Window grouping to Always
# 2. Save this script in ~/bin
# 3. Configure keyboard shortcuts to run this script:
#        <Super>1 -> ~/bin/panel_navigate 1
#        <Super>2 -> ~/bin/panel_navigate 2

import subprocess
import sys

def get_value(command):
    return subprocess.check_output(['/bin/bash', '-c', command]).decode('utf-8').strip()

def run_command(command):
    subprocess.Popen(['/bin/bash', '-c', command])

try:
    devnull = open('/dev/null', 'w')
    subprocess.check_output(['/bin/bash', '-c', 'wmctrl -v'], stderr=devnull)
    devnull.close()
except subprocess.CalledProcessError:
    print('This script requires wmctrl', file=sys.stderr)
    exit(1)

# Determine current state
current_workspace_id = get_value('xprop -root _NET_CURRENT_DESKTOP').split()[2]
current_window_id = get_value(r'xprop -root -f _NET_ACTIVE_WINDOW 0x " \$0\\n" _NET_ACTIVE_WINDOW').split()[1]
current_window_group_name = None
current_window_group_id = None

# Determine what window groups exist
window_ids = get_value('xprop -root _NET_CLIENT_LIST').split('#')[1].strip().split(' ')
window_ids = map(lambda window_id: window_id.replace(',', ''), window_ids)

window_groups = []

for window_id in window_ids:
    window_workspace_id = get_value('xprop -id {} _NET_WM_DESKTOP'.format(window_id)).split(' ', 3)[2]

    if window_workspace_id != current_workspace_id:
        continue

    window_class = get_value('xprop -id {} WM_CLASS'.format(window_id)).split(' ', 3)[3][1:-1]
    window_group = next((wg for wg in window_groups if wg['name'] == window_class), None)

    if window_id == current_window_id:
        current_window_group_name = window_class

    if window_group is None:
        window_group = {
            'name': window_class,
            'windows': []
        }

        window_groups.append(window_group)

    window_group['windows'].append(window_id)

try:
    requested_window_group_id = int(sys.argv[1])
except IndexError:
    print('No window group specified', file = sys.stderr)
    sys.exit(1)

if requested_window_group_id <= 0 or requested_window_group_id > len(window_groups):
    print('Invalid window group {}'.format(requested_window_group_id), file = sys.stderr)
    sys.exit(1)

window_groups.sort(key = lambda wg: wg['name'].lower())

requested_window_group_id -= 1
requested_window_group = window_groups[requested_window_group_id]

current_window_group = next((wg for wg in window_groups if wg['name'] == current_window_group_name), None)

if len(requested_window_group['windows']) == 1:
    # Activate or minimize the single window in this window group
    window_id = requested_window_group['windows'][0]

    if current_window_group == requested_window_group:
        run_command('wmctrl -ir {} -b  add,hidden'.format(window_id))
    else:
        run_command('wmctrl -ia {}'.format(window_id))
else:
    if current_window_group == requested_window_group:
        # Cycle through the windows in this window group
        windows = requested_window_group['windows'] + requested_window_group['windows']

        for i in range(len(windows)):
            if windows[i] == current_window_id:
                window_id = windows[i + 1]
                break
    else:
        # Switch to the first window in the requestedwindow group
        window_id = requested_window_group['windows'][0]

    run_command('wmctrl -ia {}'.format(window_id))
